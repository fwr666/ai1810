day04回顾:
   字符串
   　　字符串的格式化表达式
   　　　　'姓名：%s,年龄：%d'%('tony',15)
   改得更好　　逻辑的先后


   break　语句
   　　终止循环（结束循环语句whlie 或 for 的执行）
   注意：
   　　break 只能终止包含它的那个循环语句(for , while)

   死循环
   　　通常用于循环次数不确定的循环
   　　
   day05 笔记:
      for 语句：
      　　作用：
      　　　　用来遍历可迭代对象的数据元素
      可迭代对象是指能一次获取数据元素的对象：
      　　可迭代对象包括：　
      　　　　字符串：str
             列表：　list
            　元组:  tuple
            字典：dict
            集合: set
            ...
    语法：
    　　for 变量列表　in 可迭代对象
    　   语句块1
       else:
         语句块2

    说明：
    　　1.可迭代对象每次提供一个元素一次赋值给变量列表中的变量，赋值完毕后
    　　　　执行语句块1，重复执行此步骤，直到可迭代对象不能提供数据为止
       2.可迭代对象迭代完所有的元素后，执行else子句部分的语句块2,然后

    
    练习：
    　　输入一个字符，从尾向头输入这个字符串的字符
    　　　如：
    　　　　请输入：hello
         打印如下：
        可以用while 语句　或for 语句　实现

range() 函数
　　函数　　　说明：
　　range(stop) 用来生成0~stop区间内的整数，直到stop 结束，不含stop
 range(start,stop,step)　用来生成start～stop区间内的整数，直到stop
   为止（不含stop）每个整数间隔step (step可以为负数,但不可以为0)

    作用：
    　　用来创建一个生成一系列整数的可迭代对象（也叫整数序列生成器）
    说明：
    　　此函数调用返回回来的对象可以用于for语句取值
     示例：
     　　range(4)   #生成　0,1,2,3
        range(3,6)  #生成　　3,4,5
        range(1,10,2)----1,3,5,7,9
        range(5,0,-2)----5,3,1
for 语句的注意事项：
　　１．for 中　range　的调用次序:
     #请问此程序的打印结果是什么？为什么？
     i = 6
     for x in range(1,i):
       print('x=',x,i)
       i -= 1

      结果：　循环５此，循环次数与i的变化没有关系
  2.for语句内的变量可能不会被创建
     for x in range(4,0)
        print(x)
      else:
       print("循环结束后,x=",x)  #出错，此变量不存在

  for 语句嵌套：
  　　　与 while 一样，for 语句是语句（复合语句）,它可以嵌套到其他
  　复合语句中
  　　示例：
  　　　for x in 'ABC':
          for y in "123":
            print(x+y)
    
  练习：
  　输入一个整数，代表正方形的宽度，


  continue 语句
  　问题：
  　　如何让程序不再向下执行，重新开始一次新的循环
  　计算机为现实服务：
  　　作用：
  　　　用于循环语句(while,for语句)中，不再执行本次####只能用于循环语句
  　循环内continue之后的语句，重新一次新的循环
   说明：
   　１．在for 语句中执行continue语句，将会从可迭代对象中
   　取下一个元素，绑定变量后再次进行循环
   　2.在while语句中执行continue语句，将会直接跳出到真值表达式处，
   　重新判断循环条件
   　语法：
   　　　continue 
   　示例见:
      continue.py

  练习：１．求１～１００之间所有不能被２，３，５，７中任意一个数整除的数的和

  循环小结：
  　　while语句
  　　　根据条件循环
     for 语句
     　　　字符串　str
          range() 调用后的返回值
      break 语句(终止循环)
      continue 语句(开始一次新的循环)
     、　根据可迭代对象

熟练的过程：
　练　

列表 :
  list 
  问题：　
  　　如何将计算机运行的数据临时存入一个地方，同时又
  方便添加删除，修改等操作？　　
　
　家里的衣柜是干什么的？　　容器
　　　用来临时存储衣服。
什么是列表：
　　列表是一种容器：
　　列表是可以被改变的序列　　　增　删　改
　　列表是由一系列的特定元素组成，元素与元素之间没有任何的关联关系
　　　他们之间有先后顺序关系
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
　　python　序列类型简介
     字符串　str 
     列表　list 
     元组  tuple 
     字节串　bytes
     字节数组　bytearray
  
  创建空列表的字面值
  　　[]　创建空列表
  　　如：
  　　　L=[]#L绑定一个空列表
  　　创建非空列表的字面值：
  　　　　L = [1,2,3,4]
         L = ['ab','cd']
         L = [1,2,'as']
         L = [1,2,[2,3,'a'],4]
        　
python 变量一定要绑定对象　即使是None

列表的构造函数：
　　list()   生成一个空的列表，等同于 []  字面值形式
    list(iterable)  用可迭代对象创建一个列表

  示例：
  　　L = list()  #绑定空列表
     L  = list('hello') # L绑定['h','e','l','l','o']
     L = list(range(1,5,2))  ＃L 绑定[1,3]
   列表的运算：
   　　+   +=   *    *=
  　　字符串：str
  都是序列
  + 用于拼接列表
  　x = [1,2,3]
    y = [4,5,6]
    z = x + y # = [1,2,3,4,5,6]
    z2 = y + x # = [4,5,6,1,2,3]
  有先后顺序
  　
  　+= 运算符  用于右侧可迭代对象的数据追加在原列表数据之后   与字符串的追加有本质的不同
       语法：
       　　x += 可迭代对象
       　x = [1,2,3]
         x += [4,5,6]
         x += "ABC"
         x += range(10,13)
        注意：
        　　列表是可变容器，+=　会改变原列表  
          
　* 生成重复的列表：
　　　x = [1,2]*3  # x = [1,2,1,2,2,1]
  *= 原来的列表重复n倍
  　
列表的比较运算：
　　运算符：
　　　<  <=  >  >=  == !=
　　　列表的比较规则与字符串的比较规则相同
　　　列表要求每两个元素能依次进行比较，否则会出现类型错误
示例:
  x = [1,2,3]
  y = [2,3,4]
  x != y #True
  x < y  #True 
  [1,2,3] < [1,3,2] #True
  [1,'two']>['two',1] #TypeError

   黑客就是多去试试

   列表是可迭代对象：
   　L = [1,3,4,10]
     for x in L:
       print(x)　

容器类型都是可迭代的，

练习：
　　１，写一个程序，输入三行文字，将这三行文字保存与一个列表中L中，
　　　并打印这个列表





列表的　in / not in 对象
　判断一个值是否存在与列表中，如果存在返回True,否则返回False
 同字符串的in 运算符, 用于检查一个值是否存在列表中


作业：
 １．写程序打印九九乘法表
 ２．写一个程序，任意输入一个整数，判断这个数是否为素数
 　　prime素数（也叫质数），是只能被１和自身整数的正整数
 　提示：
 　　　用排除法：
 　　　　　当判断x是否为素数时，只要让ｘ分别除以2,3,4...x-1
     只要有一次被整除，则ｘ不是素数，否则ｘ是素数
  3.输入一个整数，此整数代表树干的高度，打印一颗如下
  形状的圣诞树
  　如：
  　　　输入　２　
  　　　　打印如下：
  　　 *
     ***
    *****
      *
      *
      *

  4,算出１００～９９９范围内的水仙花数 Narcissistic Numer
   水仙花数是指百位的三次方＋十位的三次方＋个位的三次方





















            