day06回顾

列表                       增　删　改　查
　　索引和切片
　　　　取值
　　　　　　v = 列表[整数表达式]
          lst2 = 列表[开始:结束:步长]#返回列表
       赋值：
       　　列表[整数表达式] = v
          列表[开始:结束:步长] = 可迭代对象#可迭代对象，一个一个拿
    del　语句
    　　　del 列表[整数表达式]
         del 列表[开始:结束:步长]

函数：
　　len(x)  max(x) min(x) sum(x) any(x) all(x)

reversed(x)   将可迭代对象反转，返回另一个可迭代对象
 sorted(x,reverse = False) 排序（默认为升序排序）


列表的方法：
　L.append(x) ＃追加
  L.extend(可迭代对象)#作用类似于　L += （可迭代对象）
  L.count(x)
  L.copy()  浅拷贝
  L.remove(x)  删除
  L.pop([索引]) 移除(取出)返回取出来的数据
  L.clear()
  L.insert(索引，obj) 插入
  L.sort(reverse = False) 

  L1 = L[::] 或 L2 = L.copy()　 浅拷贝

  深拷贝：
  　　import copy
     L2 = copy.deepcopy(L1)  #复制整数树型关联的对象

文本解析方法：
　　s.split(sep = None)
   s.splitlines()
   s.join()

列表推导式：
　　创建列表的表达式：
　　　　[表达式 for 变量　in 可迭代对象　if 真值表达式...]

day07 笔记：
　　元组　tuple
     １．元组是不可以改变的序列，同list一样，元组可以存放任意类型数据的容器
     2.可以认为，元组是不可变列表　　　　　　　　　　　　str  0～６５５３５

元组的表示方式：
　　用小括号()　括起来,单个元素括起来后加逗号(,)号区分元组还是
　单个元素
创建空元组：
　　()　　＃创建一个空元组
 创建非空元组：
 　　t = 100,
     t = (200,)
     t = (1,2,3)
     t = 100,200,300
  type(x)  函数可以返回X的类型

元组的错误示例；
　　t = (20)  t　绑定２０这个整数，不是元组
   x,y,z = 100,200,300   序列赋值，不是元组
   x,


元组的构造函数：
　　tuple() 生成一个空的元组，等同于()
 tuple(iterable)  用可迭代对象生成一个元组

 元组是可迭代对象
 　　t = tuple("ABC")
     for x in t:
       print(x)
    L = [x for x in t]

元组的运算：、
　　算术运算：
　　　+ += * *=
   用法等同与字符串的算术运算
   　如：
   　　t = (1,2,3) + (4,5,6)
       t += (7,8,9) #此处t绑定的对象的ID会变化


    元组的in/not in 运算符
     判断一个值是否存在于元组中，如果存在返回True,否则返回False
       (与列表的in/ not in 功能相同)
    索引　index
      　用法等同于列表的索引
       返回一个新的元组
      　注：元组不支持索引赋值
      元组不能切片赋值

      元组的方法：
      　t.count()
       t.index()

    练习：　
    　　生成一个0~9 的整数的平方的元组，元组如下：　
    　　　　(1,4,9,...81)


    三种序列　小结
    　str 
      tuple 
      list
    都是容器:
      不可变: str , tuple
      可变　: list
    都有先后顺序关系

    能用于序列的函数总结：
    　len(x) max(x) min(x) 
      sum(x) any(x) all(x)

    构造函数：
    　str(x)  tuple(x)  list(x)
      reversed(x) , sorted(x,reverse = False)
    
字典：
　　dict
 什么是字典：
    １．字典是一种可变的容器，可以存储任意类型的数据
    ２．字典中的每个数据都是用"键"(key)进行索引，而
    　　像序列（字符串，列表等）可以用整数下标进行索引
    ３．字典内的数据没有先后顺序，字典的存储是无序的
    　4．字典内的数据以键(key)-值(value)对的形式进行
    　　　映射存储    键　值　的　存储　位置不一样
    5.字典的键不能重复，且只能用不可变类型作为字典的键

    字典的字面值表示方式：
    　　字典是以{}括起来，以冒号(:)分隔键值对，各键－值对之间用
    逗号分隔   

    创建空字典：
    　d = {}
    创建非空字典：
    　d = {'呆头':'666','战力':'5'}
    值：可以是列表
    键：不能是列表，　可以是元组　　　,键：必须是不可变的类型

    d = {'a':{'b':100,'c':200}}
    d = {tuple(range(4)):list(range(4))}------{(0, 1, 2, 3): [0, 1, 2, 3]}
    #键重复只能保留一个

    字典的构造函数　dict 
     dict() #创建一个空的字典　等同于　{}
     dict(iterable) 用可迭代对象初始化一个字典
     dict(**kwargus)　关键字传参形式生成一个字典
示例：
　　注；
     关键字传参时，关键字的名字必须是符合标识符命名规则的字符串

    字典的键（ｋｅｙ）必须是不可变类型：
      bool, int , float ,complex, str,tuple,
       frozenset(固定集合) , bytes(字节串) ,None
    可变的数据类型：
    　　list, dict ,set（集合）,bytearray(字节数组)(后面才学)

　字典的键索引：
　　用[] 运算符可以获取字典内“键”对应的值
　　语法：
　　　　v = 字典[键]
    示例：
    　d = {'name':'ying','age':20}
     print(d['name'],'9',d['age'],'岁')
  添加和修改字典的元素
  　　语法：
  　　　字典[键]　＝　值
  　说明：
  　　　如果键存在则修改键绑定的值，不存在则创建键对应的值
   del 语句
   　　删除字典的值，同时解除与值的绑定关系
   　语法：
   　　del 字典[键]
     示例：
     　　d = {'name':'mm','age':18}
     del d['age']
  字典的成员资格运算　in / not in 运算符
  　　可以用　in 运算符来判断一个键是否存在于字典中，如果存在则返回
  　True,否则返回False
   not in 与　in 结果相反
    示例：
    　　d = {1:'一','aaa':'三个a'}

  字典的迭代访问　　　　　　　　　　　　　　　　　　　　　　　　　　
  
  　字典是可迭代对象，字典只能对键进行迭代访问
  示例：
  　　d = {'一':1,'二':2,'三':3} 
  
  字典的比较：
  　>  >=  <  <=  ==  !=
  
  == 字典是否完全相同 　（键相同，值也相同则返回True）
  !=  与 == 返回值相反

  可以用于字典的内建函数：
  　len(x)   返回字典的键值对的个数
    max(x)   返回字典的键的最大值
    min(x)   返回字典的键的最小值
    sum(x)   返回字典中所有键的和
    any(x)   真值测试，如果字典中的一个键为真，则结果为True
    all(x)                       所有键为真，则返回True

字典的方法：
　　文档见：
　/home/tarena/下载/python_base_docs_html
 　　
{0: 'Ling', 2: 's'}
>>> d.items()
dict_items([(0, 'Ling'), (2, 's')])

for 变量列表　in　可迭代对象:
    语句

for k,v in d.items():#可迭代对象返回的是一个序列－
    print('键':k,'值':v)

字典推导式
　　字典推导式是用可迭代对象依次生成字典内元素的表达式

语法：
　　{键表达式:值表达式 for 变量 in 可迭代对象 [if 真值表达式]}
 [] 内的内容可省略
  
   生成一个字典，键为数字(1,9),值为键的平方
    
  d = {x:x**2 for x in range(1,10)}

字典推导式的嵌套：
　　规则同列表推导式



字典 vs 列表
1.都是可变对象
2.索引方式不同(列表用整数索引，字典用键索引)列表　线性递增　　
4.列表的存储是有序的,字典的存储是无序的