形参(接收)
   接收的实参的引用关系(并不会复制对象)
    
     　　缺省参数：
     　　　　def fx(a=10, b=20, c=30):
                pass
        形参的定义:
           位置形参
           *元组形参
           命名关键字形参
           ** 字典形参
    全局变量　和　局部变量
    .py文件内全局  

  day10 笔记：
    globals 和 locals 函数：
    　　globals() 返回当前全局作用域内变量的字典
       locals() 　返回当前局部变量作用域内变量的字典

    
函数变量　　　　　变量(没有类型)　　　　　　对象(有类型)
 　　　　　　　　　　　　　　　　　　　　　　函数类



函数变量：
　　函数名是变量,它在创建函数绑定一个函数

示例：　
　　def f1():
       print('f1被调用了')

f2 = f1 #<<<注意这里f1没加括号
f2()  #调用f2变量绑定的函数，让函数执行绑定的函数
f1()

>>> def f1():
...     print('f1')
... 
>>> def f2():
...     print('f2')
... 
>>> f1,f2 = f2,f1  #交换两个变量的绑定关系
>>> 
>>> f1()
f2
>>> f2()
f1

一个函数可以作为另一个函数的实参传递
　　示例：
　　　　　　def f1()

函数可以作为另一个函数的返回值
　　一个函数内部可以用return 语句返回另一个函数的引用关系

示例见:
    return_function.py

练习：
　　写一个计算公式的解释执行器，已知有如下一些函数
　def myadd(x,y):


函数的嵌套定义：
　　函数嵌套定义是指一个函数里用def 语句来创建其它函数的情况
示例:
  def fn_outer():
    print('fn_outer被调用了')
    print('fn_outer 调用结束')
    fn_outer()
    
python3　的作用域　
　　作用域也称命名空间, 是访问变量时查找变量名的范围空间

python 的四个作用域 LEGB

作用域
局部作用域（函数内）    local(function)  L
外部嵌套函数作用域      Enclosing function local  E
函数定义所在模块的作用域 Globals                    G
python 内置模块的作用域　Builtin(python)          B

变量名的查找规则：
　　在访问变量时，先查找本地变量，然后是包裹此函数的外部的内部的
　变量，之后是全局变量，最后是内置变量，即：
　　　L -> E -> G -> B
   在默认情况下，赋值语句只能在当前作用域内创建变量

global 语句
　　作用：
　　　　告诉解释器，global 语句声明的一个或多个变量，这些变量的作用域
　　为模块级的作用域，也称为全局作用域
　　全局声明　global 将赋值变量映射到模块文件内部的作用域
　语法：
　　　global 变量名1,变量名2,...
 示例见:
    global.py

  说明：
  　　1.全局变量如果要在函数内部被赋值，则必须经过全局声明（否则会被认为是局部变量）
     2.全局变量在函数内部不经过声明就可以直接访问
     3.不能先声明局部变量，再用global 声明为局部变量,此做法不和规则
     4.global 变量列表里的变量名不能出现在函数的形参列表里。


  练习：
  　　用全局变量记录一个函数hello 被调用的次数，部分代码如下：
  　　　count = 0
   

   nonlocal 是外部嵌套作用函数作用域

   语法：
   　　1.nonlocal 变量名1,变量名2,...
      2.对nonlocal 变量进行赋值将对外部嵌套函数作用域内的变量
      　进行操作
      3.当有两层或两层以上的函数嵌套时，访问nonlocal只对
      　　最近一层的变量进行操作
      4.nonlocal 语句的变量列表里的变量名，不能出现在此函数的形参列表中



    示例见：
    　　nonlocal.py

    lambda 表达式(又称匿名函数)
      作用
      　　创建一个匿名函数对象
      语法格式：
      　　lambda [函数的形参列表]:表达式
      　注: []里的内容可以为空
      返回值：
      　　函数对象的引用关系
      示例见：
      　　lambda.py

      说明：
      　　lambda 表达式创建的函数只能包含一条表达式
      　　lambda 比函数简单且可以随时创建和销毁，有利于
      　　　　　　　减少程序的偶合度（偶合度为程序模块之间的关联程度）
    

 eval 和　exec 函数
 eval 函数:
      作用：
      　　把一个字符串当成一个表达式来执行，返回表达式执行后的结果
      格式：
      　　eval(source,global=None, local=None)
      参数：
      　　source:  用于执行表达式字符串
      　　global   用于描述source执行的全局变量环境的字典
      　　local    用于描述source 执行的局部变量环境的字典
      示例见：
      　　eval.py  expression value 表达式的值

exec 把一个字符串当成程序来执行
格式：
      　　eval(source,global=None, local=None)
      参数：
      　　source:  用于执行表达式字符串
      　　global   用于描述source执行的全局变量环境的字典
      　　local    用于描述source 执行的局部变量环境的字典