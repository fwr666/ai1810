day11回顾:
　　全局变量
一旦创建，不会自动销毁，需要用del语句销毁

　　局部变量

在函数调用时（过程中）创建，自动销毁

globals
返回全局变量的字典

/   locals
返回局部变量的字典


函数变量
　　函数名是变量，在创建时绑定一个"函数"，
    函数可以作为形参传入另一个函数
    函数可以作为另一个函数的返回值
    函数可以嵌套定义

作用域：
　　LEGB

glocal 语句
　　声明为全局变量

nonlocal 语句
　　声明为外部嵌套函数作用域

lambda 表达式
　　创建函数的表达式
　　主要用来创建简单函数
   形参列表可以用在这里

eval  exec 函数
　　把字符串当成"表达式"来运行，返回表达式的运算结果

exec 
　　把字符串当成　python 语句来执行

day11
  函数式编程　function programming 

  函数式编程是指用一系列函数解决问题

  说明，每个函数只完成细小的功能，一系列函数任意组成
  可以解决大问题，函数仅接受输入并产生输出
  ，不包含任何能影响输出的内部状态


函数的可重入性：
　　当一个函数没有访问除局部变量以外的变量，则此函数为可
重入函数

特点：
　　输入一定，结果必须一定

尽量不使用全局变量，减小程序的耦合度

高阶函数 High Order Function 

什么是高阶函数：
　　　满足下列条件中一个的函数即为高阶函数
　　　　　１．函数接受一个或多个函数作为参数传入
　　　　　２．函数返回一个函数　
内建的高阶函数
　map filter  sorted

map函数：
    格式：　
    　　map(func,iterable1,iterable2...)
    作用:
      用iterable1,iterable2中取出的数据用func处理后返回
    处理后的结果
    参数：
    　　func 数据处理函数
    　　iterable1,iterable2 可迭代对象
    　返回值：
    　　　可迭代对象
    class map(object)
 |  map(func, *iterables) --> map object
 |  
 |  Make an iterator that computes the function using arguments from
 |  each of the iterables.  Stops when the shortest iterable is exhausted.


说明：
　　func 函数的形参列表的形参个数与map函数中可迭代对象的个数相关,
一般func函数的形参个数等于map函数中的可迭代对象的个数

pow(x,y,z=None)   映射

iterable 取决与最短的

filter           过滤　筛选
　格式:
    filter (func,iterable)
  作用:
    创建一个可迭代对象,此可迭代对象将用func函数对iterable 中的数据进行筛选
   参数:
     func　筛选函数，有一个形参，通常返回True/False
     iterable,原始的可迭代对象
    返回值：
    　　可迭代对象
    示例：
    def isodd(x):
    '''此函数判断x 是否为奇数，如果为奇数返回True'''
        return x % 2 == 1

    sorted 函数
    　　作用:
    　　　　将原可迭代对象的数据进行排序,生成排序后的列表
        格式:
           sorted(iterable,key=None,reverse=False)

        参数：
        　　iterable 可迭代对象
        　　key 函数,用来提供一个排序的依据值，默认用原值进行比较
                key函数传入的是要比较的数据对象,返回值为能进行比较的值
           reverse 标志用来设置是否降序排序

        返回值：
        　　排序后的列表
        示例：
        　　

        key 函数的格式：
        　　　def xxx （a需要比较的数据）:
                  return a 的依据


小结：
　　三个高阶函数：
　　　　map(func,)
         对一个或多个迭代的数据处理
        filter 

        sorted

        python内部 十几个高阶函数

 递归：
 　 recursion  
  递归是指函数直接或间接的调用自身

说明：
　　递归一定要控制递归的层数，当符合一定条件时要终止递归
　　几乎所有的递归都能用while循环来代替

　　递归分两个阶段：
　　　　　递推阶段：
　　　　　　　从原问题出发，按递归公式，从未知到一致，最终返回
　　　　回归阶段
　　　　　　回归阶段：
　　　　　　　　　按递归终止条件，逆向代入递归公式，回归到原问题求解
　
　问题：
　　　局部变量在什么时候会自动销毁?
  　　　　函数结束后才自动销毁(如果函数尚未结束则局部变量不会销毁))
      同一个函数能有几个局部变量?
          调用几次就有几个局部变量
  示例：　、　　　recursion.py
  　　
 递归的优缺点：
 　　递归一定要控制递归的层数，当符合某一条件时要终止递归调用
 　　
 　　优点：
 　　　递归可以把问题简单化，让思路更加清晰，代码更简洁

 　　缺点：
 　　　递归因系统环境影响大，当递归深度太大时，可能会得到不可预知的结果
  应用场景：
  　　　查找文件 象棋 五子棋（神仙都下不赢）  


闭包 closure

什么是闭包
　　闭包是指引用了此函数外部嵌套函数的变量的函数

 闭包必须满足三个条件：
 　　1.必须有一个内嵌函数
 　　2.内嵌函数必须引用外部函数中的变量
 　　3.外部函数返回值必须是嵌套函数
 　
 　思考：
 　　全局变量和局部变量的区别
    
     全局变量
     　　一直存在，谁都可以访问和修改
     局部变量
     　　只是在调用时存在，只能在函数内部进行访问和修改

示例见:
   closure.py
    
     java  javascript
     swift  object

    闭包的优缺点：
    　　优点：
    　　　加强封装性，用内部嵌套函数可以使用函数之外的变量而不会被
    　破坏，
    　　缺点：
    　　　　由于闭包会使得函数中的变量都保存在内存中，内存消耗量大
    　　所以不能滥用闭包
   保存的是作用域　，整个环境












