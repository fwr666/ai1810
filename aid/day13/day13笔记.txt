def 装饰器函数(fn):
   def fx(形参列表同被装饰函数的形参列表):
       ...
       fn()#内部调用fn
       ...
    return fx

@装饰器函数
def myfun(a,b,c):
   ...
myfun(1,2,3)


import 语句搜索模块的路径顺序：
１．搜索内建模块
　２．搜索运行时的路径
　　３．搜索sys.path提供的路径


模块的重新加载
　示例：
　　　import mymod
     import imp
     imp.reload(mymod)

python 模块被导入和执行的过程
　1.先搜索相关的路径找模块(.py文件)
  2.判断是否有此模块对应的.pyc文件，如果有.pyc文件.pyc文件
  　比.py文件新,则直接加载.pyc文件
  3.否则先用.py文件生成.pyc文件,然后再加载.pyc文件

  pyc 模块的编译文件(python compile)
  　　　编译　　解释执行器
  mymod.py -----> mymod.pyc -----> python3

  模块的属性
  　　1.模块的文档字符串
  　　　　模块内第一次没有赋值给任何变量的字符串是模块的文档字符串
  　　　　模块的文档字符串绑定在模块的__doc__属性上
     2.模块的__file__属性
     　　用于绑定模块的路径
     如;
       import mymod
       print(mymod.__file__)

    3.模块的 __name__属性
    　　__name__属性用来记录模块的自身的名字
    作用：
    　　1.记录模块名
    　　２．用来判断当前模块是否是主模块
    说明：
    　　１．当此模块作为主模块（也就是它是第一个运行的模块）运行时，
    　　　　　__name__绑定'__main__'
        2.当前模块不是主模块，则是被其它模块导入时，此属性绑定模块名，
        　　即
        　xxx.py 的模块名为xxx

    模块内的__all__列表
    　　　模块中的__all__列表是一个用来存放可导出属性的字符串列表
    作用：
    　　当用from xxx import * 导入时，只导入__all__列表内的属性

    __all__只对from xxx import *　有效

    模块的隐藏属性
    　　模块中以下划线(_)开头的属性，在from xx import * 语句导入时不被导入，
    通常称这些属性为隐藏属性
    示例见：
    　　
随机模块 random
  作用：
  　　用于模拟或生成随机输出的模块
  见文档

包（模块包）package
  包将模块以文件夹的组织形式进行分组管理的方法

包的作用:
　　将一系列模块进行分类管理　
  import xxx.xx
   
    包的作用：
    　将一系列模块进行分类管理，有利于访问命名冲突

  mypack/
    __init__.py
    menu.py
    games/
       __init__.py

       ...

    包的导入语法：
    　　同模块的导入规则
    　　　　import 包名　[as 包别名]
           import 包名.模块名 [as 模块新名]
           import 包名.子包名.模块名 [as 模块新名]
           ...

           from 包名 import 模块名 [as 模块新名]
           from 包名

import 语句搜索包的路径顺序
  1.搜索程序的运行时路径（当前工作目录）
  2.搜索sys.path提供的路径
  
  __init__.py文件
  　　__init__.py 是常规包内必须包含的文件
  　　__init__.py  会在包加载时自动调用

  作用：
  　　编写此包的内容
  　　在内部填写包的文档字符串
　　　在__init__.py　文件内可以加载次此包所依赖的一些其他模块

__init__.py  内的　__all__列表
作用：
　　用来记录此包中有哪些子包或模块需要导入
  当用 from 包　import * 语句导入时，只查找__all__列表中所有的模块
  或子包

包的相对导入
  包的相对导入是指包内模块的相互导入

  语法：
  　　from  相对路径包或模块  import 属性或模块
     或
     from 相对路径包或模块　import *
  相对路径:
    from imprt 语句中from 和 import 间可以用相对路径
    . 当前路径
    ..　上一级路径
    ... 上二级路径
    .... 以此类推
    说明：
    　　相对导入时，不能超出包的外部
    　　相对导入不能用于import 语句中

练习：
１．写一个程序，模拟斗地主发牌，牌共５４张
　　种类有：