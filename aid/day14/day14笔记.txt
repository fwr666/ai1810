day13

路径顺序:
　１．查找内建模块
　２．查找当前工作路径
　３．查找sys.path里指定的路径中
xxx.py ---> xxx.pyc ----> python3
__all__列表
　　__all__＝['var1','var2']
from xx import *
 不导入__all__其他的


 day14

  try 语句的两种用法：
  　　　try - except 语句
       try - finally 语句

  try - finally 语句
  　　语句：　
  　　　　try :
        　　可能触发异常的语句
        finally:
          最终语句
        说明：
        　finally 子句不可以省略
          一定不存在except子句
        作用：
          通常用try-finally语句来执行触发异常时一定
        要执行的语句,无论异常是否发生finally 子句都会
        被执行
        try - finally 语句不会改变程序的（）  

        raise 语句:#这个叫发
        　作用：
          触发一个错误，让程序进入异常状态，
          发送错误通知给调用者

        语句:
          raise  异常类型
          raise  异常对象
          raise  重新触发上一次异常
          说明：
          　raise  无法调用通常用于try-except 的except子句中
          示例见:
            raise.py
异常小结：
　　四条：
　try-except 语句
    用来接收错误信息，并处理错误（异常转正常）
　try-finally 语句
    执行必须要执行语句（不会转换程序的状态）
　raise 语句
    发送错误通知，让程序进入异常流程
　assert 语句
    根据条件发送AssertionError类型的异常通知，
    让程序进入异常流程

迭代器：
　什么是迭代器：
　　迭代器是访问可迭代对象的工具
　　迭代器是指用iter(obj)函数返回的对象(实例)
   迭代器可以用next(it)函数获取可迭代对象的数据

迭代器相关的函数
  iter(iterable)  从可迭代对象中返回一个迭代器,iterable
     必须是一个能提供迭代器的对象
    next(iterator) 从迭代器iterator 中获取下一个记录，如果
    无法获取下一条记录，则会触发StopIteration 异常通知

    说明：
    　　迭代器只能往前取值，不会后退
    　　用iter函数可以返回一个可迭代对象的迭代器
    示例：
    　　L = [1,3,5,7]
   it = iter(L)#从对象L中获取迭代器,然后用it 变量绑定

    用迭代器函数iter,和next　访问可迭代对象的示例见:
      iterator.py
    #







