对象的特征：
　　属性：
　　　实例属性（实例变量）来记录对象自身的数据
　　行为：
　　　　实例方法来描述对象的行为
　类---->实例方法----->实例属性

类　是用来描述对象，创建对象的'工厂'
class 语句
　　语法：
　　　　class 类名(继承列表):
          示例方法
          初始化方法
          析构方法
          类变量
          类方法
          静态方法
构造函数：
　类名(调用传参)#创建实例instance对象(boject)

day18笔记

　类属性（也叫类变量）
   类属性是类的变量，此属性属于类，不属于此类的实例

作用：
　　通常用来记录该类创建的对象的共有属性
说明：
　　类属性可以通过该类直接访问
　　可以通过类的实例直接访问
　　　可以通过此类的对象的__class__属性直接访问
示例见：



对象：
　　函数
   数字
   模块
   包
   列表

类的文档字符串
　类内第一个没有赋值给任何变量的字符串为类的文档字符串
　类的文档字符串可以通过help函数查看
　类的文档字符串可以用类的 __doc__属性访问

类的__slots__列表　　　　　　　　　　　　　　
作用：
　　限定一个类创建的实例只能有固定的实例属性，不允许添加此列表以外的实例属性
２．防止因错误实例属性的名称而发生程序逻辑错误

说明：
　　__slots__属性是一个列表，列表的值是字符串
　　２．含有__slots__属性的类所创建的实例对象没有
　　　　　__dict__属性，即此实例不用字典来存储对象的实例属性


类方法　　@classmethod
  类方法是用于描述类的行为的方法，类方法属于类，不属于类的实例

说明：
　　类方法需要使用@classmethod 装饰器定义
　　类方法至少有一个形参，第一个形参用于绑定类，约定写为'cls'
   类和该类的实例都可以调用类方法
   类方法不能访问此类创建的对象的实例属性

函数

实例方法　--->实例（对象）

类方法 ---->类

静态方法

静态方法 @staticmethod
  静态方法是定义在类内部的函数，此函数的作用域是类的内部
说明：
　　静态方法需要使用@staticmethod 装饰器定义
   静态方法与普通函数定义相同，不需要传入self和cls参数
   静态方法只能凭借该类或类创建的实例调用
   静态方法不能访问类属性和实例属性



继承(inheritance)
  什么是继承？
  　继承是指从已有的类中派生出新类，新类具有原类的数据属性和行为
  　并能扩展新的行为
  名词：
  　继承/派生
  　　派生指是从源类衍生出新的类
  为什么继承/派生
  　继承的目的是延续旧类的功能
  　派生的目的是在旧类的基础上添加新的功能
  作用：　
  　　用继承派生机制，可以将一些共有功能加在基类中，实现代码的共享
  　　在不改变基类的代码的基础上改变原有类的功能
  名词：
  　基类(base class)　超类(super class)　父类(father class)
   派生类(derived class) 子类(child class)

单继承
　　单继承是指一个派生类由一个基类衍生出来

语法：
　　class 类名(基类名):
      语句块
    
继承说明：
　　python3 中任何类都直接或间接的继承自object类
   object类是一切类的基类

类的 __base__属性　
　　__base__属性用来记录此类的基类

覆盖　override
 什么是覆盖
 　　覆盖是指在有继承关系的类中，子类实现了与基类同名的
 方法，在子类的实例调用该方法时，实际调用的是子类中的覆盖版本，
 这种现象叫覆盖
 作用：
 　　修改父类的功能（行为）

 问题：
 　　当覆盖发生时，子类对象能否调用父类中的被覆盖方法？
 子类对象显式调用基类方法的方式：
 　　基类名.方法名(实例,参数)

 super 函数:
    作用：
    　借助super() 返回的实例间接调用其父类的覆盖方法
    语法：
    　super (cls,obj) 返回绑定超类的实例（要求obj必须为cls 类型或　cls 子类　的对象）
    super() 返回绑定超类的实例,等同于：
    　　　　　　　　super (self.__class__,实例方法的第一个参数),必须在方法内调用！

 显式调用基类的初始化方法__init__
   当子类中实现了__init__方法，基类的初始化方法并不会
  被调用　此时需要显式调用父类的初始化方法来初始化　父类对象
  