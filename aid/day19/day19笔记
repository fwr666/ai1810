
显式调用父类的方法：
　　类名.方法名(对象，传参)

day19笔记：
　　函数
　　issubclass(cls,class_or_tuple)判断一个类是否继承自
class 或　tuple 中的一个类，如果cls 是class 或 tuple
中的一个类的子类,则返回True

封装 enclosure
   封装是指隐藏类的实现细节，让使用者不用关心这些细节
封装的目的是让使用者通过尽可能少的方法（或属性）操作对象

多态　polymophic
    字面意思：
    　　多种状态
    状态：
    　静态(编译时状态)
      动态(运行时状态)
    动态　调用方法与对象相关，不与类型相关
    python 全部的对象都只有“运行时状态(动态)”,没有
    C++语言里的“编译时状态（静态）”

面向对象编程语言的特征：
　　继承
　　封装
　　多态

多继承 multiple inheritance
   语法：
   　　class 类名(基类名1,基类名2,...):
            ...
    说明：
    　１．一个子类同时继承多个父类，父类中的方法可以同时被继承下来
    　２．如果两个父类中有个同名的方法，而在

class Plane

多继承的MRO(Method Resolution Order) 问题
　　类的　__mro__属性
　此属性用于记录当前类的方法的查找顺序

砖石继承（又名棱形继承）


对象转字符串函数的使用：
　　repr(x) 返回一个符合python语法规则且能代表此对象的表达式字符串
         通常：
         　　eval(repr(obj)) == obj 为True

    str(x) 返回一个代表对象的字符串（这个字符串通常是给人阅读的)

    示例：

    　s = "I'm a five"
    sr = repr(s)
    ss = str(s)
    print(sr)
    print(ss)

    函数重写
    　　什么是函数重写
    　　　在自定义的类内添加相应的方法。
    　让自定义的类创建的对象能像内建对象一样进行内建函数操作
对象转字符串函数的重写方法
　repr() 函数的重写方法
　　　def __repr__(self):
      ....

str()函数重写方法:
   def __str__(self):
      ...

str(obj)  函数先查找obj.__str__()方法.调用此方法并返回结果

２．如果obj.__str__() 方法不存在，　则调用　obj.__repr__方法并返回结果

3.如果obj.__repr__()方法不存在,则调用object类的__str__实例方法显示<__main__.Xxxx object at 0xXXX>格式的字符串

内建函数的重写
　　__abs__        abs(obj) 函数调用
   __len__        len(obj)  函数调用
   __reversed__   reversed(obj) 函数调用
   __round__      round(obj) 函数调用

数据转换函数重写
　方法名　　　　　　　　对应函数
__complex__        complex(x)
__int__           int(x)
__float__           float(x)
__bool__          bool(x)
示例见：
　


布尔测试函数的重写
　　格式：
　　　　def __bool__(self):
            return 布尔值
    作用：
    　　用于bool(obj) 函数取值
    　　用于if 语句真值表达式中
       用于while 语句的真值表达式中
    说明：
    　　当自定义的类内有__bool__(self)方法时，
    bool(obj) 调用此方法返回值
    2. 当不存在__bool__(self)方法时，bool(obj)　返回
    　obj.__len__(self)的值，判断是否为零来测试布尔值
    ３．当不存在__len__(self)方法时，则直接返回True

    对象的属性管理函数：
    　　参见文档
    函数：
    　getattr(obj,name[,default])
      hasattr(obj,name)
      setattr(obj,name,value)
      delattr(obj,name)

迭代器(高级，究极)
什么是迭代器：
　　可以通过next函数取值的对象就是迭代器
迭代器协议
　　迭代器协议是指对象能够使用next函数获取下一项数据
在没有下一项数据时触发一个StopIteration异常　来
终止迭代的约定，
　　迭代器协议实现的方法：
　　　方法名　　　        　　对应函数
def __next__(self):      next(obj)



什么是可迭代对象：
　　是指能用iter(obj) 函数返回迭代器的对象叫可迭代对象
可迭代对象内部需要定义 __iter__(self) 方法来返回迭代器
方法名　　　　　　　　     对应函数
def __next__(self):      iter(obj)

有__iter__方法的对象叫可迭代对象
有__next__方法的对象叫迭代器


