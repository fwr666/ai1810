前情回顾

1. 插入操作
   insertOne()  插入一条文档
   insertMany() 插入多条文档
   insert()  可以插入多条或者一条文档
   save()    当_id冲突会覆盖原有文档

2. 查找操作
   find(query,field)
   findOne()

   query的用法

       操作符使用
          比较：$eq  $lt  $gt  $lte  $gte $in  $nin
	  逻辑：$and  $or  $not  $nor
          数组： $all   $size
	  其他： $exists   $mod   $type
   
   数据处理函数： pretty()  limit()  skip()  sort()
                   count()   distinct()
   
3. 删除操作
   
   deleteOne(query)  删除一条数据
   deleteMany(query)  删除多条数据
   remove（）
   findOneAndDelete() 查找并删除
*****************************************************

修改操作

mysql：update  table set ... where ...

mongo: db.collection.updateOne(query,update,upsert)
       功能： 修改第一个符合条件的文档
       参数： query  筛选条件  用法同find query
              update  要修改的数据项，需要配合修改操作         符使用
	      upsert  bool类型 默认表示没有符合筛选条	        件的文档则不做任何操作
	              如果设置为true 则没有筛选到文档就根于query和update插入文档
	      
      e.g.  将Joy年龄修改为18
      db.class0.updateOne({name:'Joy'},{$set:{age:18}})
	
      e.g.  如果没有符合query条件的文档则插入新的文档
      db.class0.updateOne({name:'Han'},{$set:{age:18}},{upsert:true})


      db.collection.updateMany(query,update,upsert)
      功能： 修改所有复合条件的文档
      参数： 同updateOne

      e.g.  同时修改所有符合条件的文档
      db.class0.updateMany({age:{$lt:18}},{$set:{age:20}})


      db.collection.update(query,update,upsert,multi)
      功能: 修改筛选到的文档
      参数：query 筛选条件
            update 修改内容
	    upsert 如果为true则可插入新的文档
	    multi  默认表示只修改第一条符合条件文档
	           设置为true表示修改多条

        e.g. 修改所有人年龄为10岁
	db.class2.update({},{$set:{age:10}},false,true)


      db.collection.findOneAndUpdate(query,update)
      功能： 查找一个文档并修改
      参数： query 筛选条件
             update 修改内容
      返回： 返回修改之前的文档

      e.g.  查找一个文档并修改年龄为17
      db.class0.findOneAndUpdate({name:'Lily'},{$set:{age:17}})


      db.collection.findOneAndReplace(query,doc)
      功能： 查找并替换一个文档
      参数： query筛选条件
             doc  替换的文档
      返回： 返回原有文档
      
      e.g.  查找一个文档，并替换为新的文档
      db.class0.findOneAndReplace({name:'Joy'},{'name':'Jame',age:17,sex:'m'})


修改器的使用

$set :  修改一个域的值，或者增加一个域

    e.g.  使用set增加一个name域
    db.class0.updateOne({name:{$exists:false}},{$set:{name:'Han'}})

$unset:  删除一个域

     e.g.  删除han的age域
      db.class0.updateOne({name:'Han'},{$unset:{age:''}})


$rename : 修改一个域的域名

    e.g.  修改所有sex域名为gender
    db.class0.updateMany({},{$rename:{sex:'gender'}})

$setOnInsert : 当upsert插入文档时，作为补充的插入内容

    e.g.  当插入新文档时，作为补充插入的 内容
    db.class0.update({name:'Daivl'},{$set:{age:18},$setOnInsert:{gender:'w'}},{upsert:true})

$inc :  加法修改器

    e.g.  所有文档年龄域加1
    db.class0.updateMany({},{$inc:{age:1}})

$mul : 乘法修改器

    e.g.  将han年龄乘以2
     db.class0.updateOne({name:'Han'},{$mul:{age:2}})

* $inc $mul 操作数可以是正数，负数，整数，小数


$max : 指定某个域的值，如果小于规定值则修改为规定值，大于规定值则不变  

    e.g. 如果age小于20则改为20，大于20则不变
    db.class0.updateOne({name:'Abby'},{$max:{age:20}})

$min : 指定某个域的值，如果大于规定值则修改为规定值，小于规定值则不变  

    e.g.  将年龄大于25的修改为25
     db.class0.updateMany({},{$min:{age:25}})


数组修改器

$push : 向数组中添加一项

    e.g.向数组中增加一项86
    db.class2.updateOne({name:'小亮'},{$push:{score:86}})

$pushAll: 向数组中增加多项

    e.g.  向数组中增加两项 5,10
    db.class2.updateOne({name:'小红'},{$pushAll:{score:[5,10]}})

$pull : 从数组中删除某一个值
  
    e.g.  删除小红score域中的5
    db.class2.update({name:'小红'},{$pull:{score:5}})

$pullAll : 同时删除数组中多个值

    e.g.  同时删除数组中的88和10
    db.class2.update({name:'小红'},{$pullAll:{score:[88,10]}})

$pop : 从数组中弹出一项
  
    e.g. 删除小明score中最后一项 （1表示最后一项，-1表示第一项）
    db.class2.update({name:'小明'},{$pop:{score:1}})

$addToSet : 向数组中添加一项，但是不能添加已有的内容

    e.g.  向数组中添加81，如果已经存在则无法添加
    db.class2.update({name:'小明'},{$addToSet:{score:81}})

$each : 对多个值进行逐一操作

   e.g.  同时添加90,10
   db.class2.update({name:'小红'},{$push:{score:{$each:[90,10]}}})

$position: 指定值的插入位置，配合each

    e.g.  向数组1号位置插入5
    db.class2.update({name:'小明'},{$push:{score:{$each:[5],$position:1}}})

$sort : 对数组排序，搭配each使用

    e.g. 对小明score排序，1升序-1降序
    db.class2.update({name:'小明'},{$push:{score:{$each:[],$sort:1}}})


时间类型

    获取当前时间：
        1. new Date() 自动生成当前时间

	e.g.
	db.class1.insertOne({book:'Python入门',date:new Date()})

	2. ISODate() 自动获取当前时间
	
	e.g.
	db.class1.insertOne({book:'Python精通',date:ISODate()})

	3. Date()  获取系统当前时间

        e.g.
	db.class1.insertOne({book:'Python放弃',date:Date()})
    
    存储任意时间
        
	ISODate()
	功能： 将指定的时间字符串转为Mongodb时间存储
	参数： 指定时间
	       “2019-01-01 12:12:12”
	       “20190101 11:11:11”
	       “20190101”
        
	e.g.
	db.class1.insertOne({book:'Python之美',date:ISODate("2018-11-20 20:58:30")})


时间戳

    valueOf()
    功能： 将ISO date转换为时间戳
    
    e.g.  记录1970.1.1 00:00:00到现在多少毫秒
    db.class1.insertOne({book:'Python涅磐',date:ISODate().valueOf()})


Null类型数据
    
    值： null

    1. 表示某个域值为空

    e.g. 表示price域值为空
     db.class1.insertOne({book:'Python放生',price:null})

    2. 表示某个域不存在
    
    e.g. 查找price域为null或者不存在这个域的文档
    db.class1.find({price:null},{_id:0})


Object类型（内部文档）

    文档中某个域的值还是文档，则该值为Object

    * 当使用内部文档的某个域时，需要外部文档域名 . 内部文档域名的方法引用，引用时需要加引号

    e.g. 通过book.title查找
    db.class3.find({'book.title':'狂人日记'},{_id:0})
    
    e.g. 修改边城价格为35
    db.class3.update({"book.title":'边城'},{$set:{'book.price':35}})


通过数组下标直接引用数组项

    * 在使用数组时，可以直接通过数组域 . 数组下标操作数组的某一项
    
    e.g.  修改小明score中第二项为67
     db.class2.update({name:'小明'},{$set:{'score.1':67}})


练习：

基于之前的grade数据库

1. 将小红的年龄修改为8岁，兴趣爱好变为跳舞画画
   update（{name:'小红'},{$set:{age:8,hobby:['dance','draw']}}）

2. 追加小明兴趣爱好唱歌
   update({name:'小明'},{$push:{hobby:'sing'}})

3. 小王多了兴趣爱好吹牛，打篮球
   update({name:'小王'},{$pushAll:{hobby:['吹牛','basketball']}})	

4. 小李兴趣多了跑步唱歌，但是注意不要和已有的重复
   update({name:'小李'},{$addToSet:{hobby:{$each:['running','sing']}}})

5. 班级所有同学年龄加1
   updateMany({},{$inc:{age:1}})

6. 删除小明 sex属性
   update({name:'小明'},{$unset:{sex:''}})

7. 删除小李兴趣中的第一项
    update({name:'小李'},{$pop:{hobby：-1}})

8. 删除小红兴趣中画画和唱歌
   update({name:'小红'},{$pullAll:{hobby:['draw','sing']}})

9. 为小王增加一个域  备注：{民族：'回族',习俗：‘不吃猪肉’}
    update({name:'小王'},{$set:{备注：{民族：'回族',习俗：‘不吃猪肉’}}})

10. 在小王备注中增加一项， 宗教：‘伊斯兰教’
      update({name:'小王'},{$set:{'备注.宗教':'伊斯兰教'}})


索引

    什么是索引？
        索引是建立文档所在位置的查找清单，使用索引可以方便的进行快速查找，减少遍历次数，提高查找效率

    索引约束
        1. 索引本身也占有数据库空间，所以当数据量很小时没有必要创建索引
	2. 索引表需要根据数据的修改及时修改，否则索引就不和内容配套，失去了意义。因为如果数据库操作时频繁的写操作而不是查找操作就不适合创建索引


创建索引

    db.collection.createIndex(index,option)
    功能： 创建索引
    参数： 索引域 和 索引选项

    e.g. 为name域创建索引
         db.class0.createIndex({name:1})
  
    * _id域会自动生成索引，该索引不能删除
    * 1 表示正向索引，-1表示逆向索引
    * 一个集合中不能创建重复的索引
    
    查看集合中索引：    
        db.collection.getIndexes()
    
    定义索引名称
        e.g.  通过索引选项name定义索引名称
        db.class0.createIndex({age:1},{name:'ageIndex'})

    其他索引创建方法

       ensureIndex()
       功能：创建索引
       参数：同createIndex
   
       e.g. 创建方法同createIndex
       db.class0.ensureIndex({gender:1})

       createIndexes([{},{}...])
       功能： 同时创建多个索引
       参数： 数组中填写多个索引项即可

       e.g.  同时创建age_-1  gender_-1两个索引
       db.class0.createIndexes([{age:-1},{gender:-1}])

删除索引

    db.collection.dropIndex()
    功能：删除一个索引
    参数: 索引名或者键值对删除

    e.g.  通过名称删除索引
    db.class0.dropIndex("gender_-1")

    e.g. 通过键值对删除
    db.class0.dropIndex({age:-1})

    db.collection.dropIndexes()
    功能： 删除所有索引 （除了_id）

    e.g. 删除class0中所有索引
        db.class0.getIndexes()


索引类型

    复合索引 ： 根据多个域创建一个索引

    e.g. 根据name  age两个域创建一个索引
         db.class0.createIndex({name:1,age:-1})

    子文档和数组索引：如果对某个域创建索引，该域的值为子文档或者数组，则对数组或者子文档中某一项进行查找也是索引查找。

    e.g. 如果对book创建索引则该查找也是索引查找
    db.class3.find({'book.title':'围城'},{_id:0})


    唯一索引 ： 要求创建索引的域不能有重复的值

    e.g.  对name域创建唯一索引
    db.class0.createIndex({name:-1},{unique:true})


    稀疏索引 ： 会在创建索引时忽略没有指定域的文档

    e.g. 对gender域创建稀疏索引
    db.class0.createIndex({gender:1},{sparse:true})


聚合操作
    
    对文档数据进行整理筛选统计

    db.collection.aggregate()
    功能： 完成聚合操作
    参数： 聚合条件，需要配合聚合操作符

    聚合操作符

   $group  分组聚合 往往需要配合一定的统计操作符完成
   
       统计求和： $sum 
       
       e.g. 按照性别分组，获取每组人数
       db.class0.aggregate({$group:{_id:'$gender',num:{$sum:1}}})


作业： 1. 熟练使用修改操作和索引操作
       2. mysql修改练习使用mongo完成
       3. 查文档完成，$avg  $project






